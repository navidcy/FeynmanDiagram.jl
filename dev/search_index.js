var documenterSearchIndex = {"docs":
[{"location":"parquet/#Parquet-algorithm-to-generate-diagram-tree","page":"Parquet algorithm to generate diagram tree","title":"Parquet algorithm to generate diagram tree","text":"","category":"section"},{"location":"parquet/","page":"Parquet algorithm to generate diagram tree","title":"Parquet algorithm to generate diagram tree","text":"Modules = [ExpressionTree.Parquet]","category":"page"},{"location":"parquet/#ExpressionTree.Parquet.IdxMap","page":"Parquet algorithm to generate diagram tree","title":"ExpressionTree.Parquet.IdxMap","text":"struct IdxMap(lv, rv, G0, Gx, ver)\n\nMap left vertex Tpair[lv], right vertex Tpair[rv], the shared Green's function G0[G0] and the channel specific Green's function Gx[Gx] to the top level 4-vertex Tpair[ver]\n\n\n\n\n\n","category":"type"},{"location":"parquet/#ExpressionTree.Parquet.Para","page":"Parquet algorithm to generate diagram tree","title":"ExpressionTree.Parquet.Para","text":"Para(chan, interactionTauNum)\n\nParameters to generate diagrams using Parquet algorithm\n\n#Arguments\n\nchan: list of channels of sub-vertices\ninteractionTauNum: τ degrees of freedom of the bare interaction\n\n\n\n\n\n","category":"type"},{"location":"parquet/#ExpressionTree.Parquet.Ver4","page":"Parquet algorithm to generate diagram tree","title":"ExpressionTree.Parquet.Ver4","text":"Ver4{W}(loopNum, tidx, para::Para; chan=nothing, level=1, id=[1, ]) where {W}\n\nGenerate 4-vertex diagrams using Parquet Algorithm\n\n#Arguments\n\nloopNum: momentum loop degrees of freedom of the 4-vertex diagrams\ntidx: the first τ variable index. It is also the τ variable of the left incoming electron for all 4-vertex diagrams\npara: parameters\nchan: list of channels of the current 4-vertex. If not specified, it is set to be para.chan\nlevel: level in the diagram tree\nid: the first element will be used as the id of the Ver4. All nodes in the tree will be labeled in preorder depth-first search\n\n#Remark:\n\nThe argument chan and para.chan are different. The former is the channels of current 4-vertex, while the later is the channels of the sub-vertices\nAbstractTrees interface is implemented for Ver4. So one can use the API in https://juliacollections.github.io/AbstractTrees.jl/stable/ to manipulate/print the tree structre of Ver4.\nThere are three different methods to print/visualize the tree structre: \n\nprint_tree(ver4::Ver4) or print_tree(bub::Bubble) to print the tree to terminal. This function is provided by AbstractTrees API. \nnewick(ver4::Ver4) or newick(bub::Bubble) to serilize the tree to a newick format string. You may save the string to a text file, then visualize it with a newick format visualizer application. \nshowTree(ver4::Ver4) to visualize the tree using the python package ete3. You have to install ete3 properly to use this function.\n\n\n\n\n\n","category":"type"},{"location":"parquet/#ExpressionTree.Parquet.newick-Tuple{ExpressionTree.Parquet.Bubble}","page":"Parquet algorithm to generate diagram tree","title":"ExpressionTree.Parquet.newick","text":"convert Bubble tree struct to a string in the newick format\n\n\n\n\n\n","category":"method"},{"location":"parquet/#ExpressionTree.Parquet.newick-Tuple{ExpressionTree.Parquet.Ver4}","page":"Parquet algorithm to generate diagram tree","title":"ExpressionTree.Parquet.newick","text":"convert Ver4 tree struct to a string in the newick format\n\n\n\n\n\n","category":"method"},{"location":"parquet/#ExpressionTree.Parquet.showTree-Tuple{Any, ExpressionTree.Parquet.Para}","page":"Parquet algorithm to generate diagram tree","title":"ExpressionTree.Parquet.showTree","text":"showTree(ver4, para::Para; verbose=0, depth=999)\n\nVisualize the diagram tree using ete3 python package\n\n#Arguments\n\nver4: the 4-vertex diagram tree to visualize\npara: parameters\nverbose=0: the amount of information to show\ndepth=999: deepest level of the diagram tree to show\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ExpressionTree","category":"page"},{"location":"#ExpressionTree","page":"Home","title":"ExpressionTree","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ExpressionTree.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ExpressionTree]","category":"page"},{"location":"#Library-Outline","page":"Home","title":"Library Outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"parquet.md\",\n]\nDepth = 1","category":"page"}]
}
